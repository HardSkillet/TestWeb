Основы ASP.NET Core
		
		Запуск приложения
	1. Чтобы запустить приложение ASP.NET Core необходим объект IHost, в рамках которого развертываеся веб-приложение
	2. Для создания IHost применяется объект IHostBuilder
	3. В программе по умолчанию IHostBuilder создается и настраивается в статическом методе Host.CreateHostBuilder(args), который выполняет ряд задач:
		а. Устанавливает корневой каталог (Directory.GetCurrentDirectory). Корневой каталог предстваляет собой папку, где будет проходить поиск различного содержимого,
		например, представлений
		б. Устанавливает конфигурацию хоста. Для этого загружаются переменные среды с префиксом "DOTNET_" и аргументы командной строки
		в. Устанавливает конфигурацию приложения. Для этого загружается содержимое из файлов appsettings.json и appsettings.{environment}.json, а также 
		переменные среды и аргументы командной строки. Если приложение находится в режиме разработки (Development), то также используются данные Secret Manager
		г. Добавляет провайдеры логирования
		д. Если проект в статусе разработки, то также обеспечивает валидацию серверов
	4. Далее вызывается метод ConfigureWebHostDefaults(), который призван выполнять конфигурацию параметров хоста, а именно:
		а. Загружает конфигурацию из переменных среды "ASPNETCORE_"
		б. Запускает и настраивает веб-сервер Kestrel, в рамках которого будет разворачиваться приложение
		в. Добавляет компонент Host Filtering, который позволяет настраивать адреса для веб-сервера Kestrel
		г. Если переменная окружения ASPNETCORE_FORWARDEDHEADERS_ENABLED равна true, добавляет компонент Forwarded Headers, 
		который позволяет считывать из запроса заголовки "X-Forwarded-"
		д. Если для работы приложения требуется IIS, то данный метод также обеспечивает интеграцию с IIS
	5. Метода ConfigureWebHostDeafaults принимает в качестве параметра делегат Action<IWebHostBuilder>. А с помощбю последовательного вызова цепочки методов у объекта
	IWebHostBuilder производится инициализация веб-сервера для развертывания веб-приложения. В частности, в данном случае у IWebHostBuilder вызывается метод UseStartup()
	6. Вызовом метода UseStartup() устанавливается стартовый класс приложения - класс Startup, с которого будет начинаться обработка входящих запросов.
	7. В методе Main у созданного объекта IHostBuilder вызывается метод Build(), который собственно создает хост - объект IHost, в рамках которого развертывается веб-приложение.
	8. Для непосредственного запуска у IHost вызывается метод Run()
	9. После этого приложение запущено и веб-сервер начинает прослушивать все входящие HTTP-запросы

		Класс Startup
	1. Класс Startup должен определять метод Configure(), а также опционально может определять конструктор класса и метод ConfigureServices()
	2. При запуске приложения сначала исполняется код конструктора класса, затем метод ConfigureServices(), затем Configure()
	3. Метода ConfigureServices() регистрирует сервисы, которые используются приложением. В качестве параметра принимает IServiceCollection, который и представляет коллекцию сервисов
	в приложении. С помощью методов расширений этого объекта происходит конфигурация приложения для использования сервисов. Все методы имеют форму Add[название_сервиса]
	4. Метода Configure() устанавливает, как приложение будет обрабатывать запрос.
	5. Для установки компонетов, которые будут обрабатывать запрос, используется метод объекта IApplicationBuilder(обязательный парметр для Configure()).
	6. Нередко Configure() принимает еще один параметр IWebHostEnvironment, который позволяет получить информацию о среде, в которой запускается приложение, 
	и взаимодействовать с ней.
	7. Методу Configure() в качестве параметра можно передавать любой сервис, зарегистрированный в методе ConfigureServices()
	8. Большинство встроенных методов IApplicationBuilder имеют форму Use[название_сервиса]. Например, app.UseRouting() настраивает систему маршрутизации в приложении
	9. Можно создать конструктор без параметров, а можно в качестве параметров передать сервисы IWebHostEnvironment (передает информацию о среде, в которой запускается приложение) 
	и IConfiguration (передает конфигурацию приложения), которые доступны для приложения по умолчанию

		Конвейер обработки запроса и middleware
	1. Компоненты конвейера, которые отвечают за обработку запроса, называются middleware
	2. В ASP.NET Core для подключения компонентов middleware используется метод Configure из класса Startup
	3. Компонент middleware может либо передать запрос далее следующему в конвейере компоненту, либо выполнить обработку и закончить работу конвейера
	Также компонент middleware в конвейере может выполнять обработку запроса как до, так и после следующего в конвейере компонента
	4. Компоненты middleware конфигурируются с помощью методов расширений Run, Map и Use объекта IApplicationBuilder, который передается в метод Configure() класса Startup. 
	Каждый компонент может быть определен как анонимный метод (встроенный inline компонент), либо может быть вынесен в отдельный класс
	5. Для создания компонентов middleware используется делегат RequestDelegate (delegate Task RequestDelegate(HttpContext context), 
	который выполняет некоторое действие и принимает контекст запроса
	6. По умолчанию ASP.NET Core предоставляет следующие встроенные компоненты middleware:
		а. Authentication: предоставляет поддержку аутентификации
		б. Cookie Policy: отслеживает согласие пользователя на хранение связанной с ним информации в куках
		в. CORS: обеспечивает поддержку кроссдоменных запросов
		г. Diagnostics: предоставляет страницы статусных кодов, функционал обработки исключений, страницу исключений разработчика
		д. Forwarded Headers: перенаправляет заголовки запроса
		е. Health Check: проверяет работоспособность приложения asp.net core
		ж. HTTP Method Override: позволяет входящему POST-запросу переопределить метод
		з. HTTPS Redirection: перенаправляет все запросы HTTP на HTTPS
		и. HTTP Strict Transport Security (HSTS): для улучшения безопасности приложения добавляет специальный заголовок ответа
		к. MVC: обеспечивает функционал фреймворка MVC
		л. Request Localization: обеспечивает поддержку локализации
		м. Response Caching: позволяет кэшировать результаты запросов
		н. Response Compression: обеспечивает сжатие ответа клиенту
		о. URL Rewrite: предоставляет функциональность URL Rewriting
		п. Endpoint Routing: предоставляет механизм маршрутизации
		р. Session: предоставляет поддержку сессий
		с. Static Files: предоставляет поддержку обработки статических файлов
		т. WebSockets: добавляет поддержку протокола WebSockets
	7. Метод Configure выполняется один раз при создании объекта класса Startup, и компоненты middleware создаются один раз и живут в течение всего жизненного цикла приложения

		Методы Use(), Run() и делегат RequestDelegate
	1. Компоненты, определенные через метод Run(), не вызывают никакие другие компоненты и дальше обработку запроса не передают
	2. Метод Use() также добавляет компоненты middleware, которые также обрабатывают запрос, но в нем может быть вызван следующий в конвейере запроса компонент middleware
	3. При вызове await next.Invoke() обработка запроса перейдет к следующему компоненту
	4. Компонент middleware должен либо генерировать ответ с помощью Response.WriteAsync, либо вызывать следующий делегат посредством next.Invoke, 
	но не выполнять оба этих действия одновременно

		Метод Map()
	1. Метод Map() (и методы расширения MapXXX()) применяется для сопоставления пути запроса с определенным делегатом, который будет обрабатывать запрос по этому пути
	2. Метод Map() может иметь вложенные методы Map(), которые обрабатывают подмаршруты
	3. Похожим образом работает метод MapWhen(). 
	Он принимает в качестве параметра делегат Func<HttpContext, bool> и обрабатывает запрос, если функция, передаваемая в качестве параметра возвращает true

		Создание компонентов middleware
	1. Класс middleware должен иметь конструктор, который принимает параметр типа RequestDelegate. 
	Через этот параметр можно получить ссылку на тот делегат запроса, который стоит следующим в конвейере обработки запроса
	2. Также в классе должен быть определен метод, который должен называться либо Invoke, либо InvokeAsync. 
	Причем этот метод должен возвращать объект Task и принимать в качестве параметра контекст запроса - объект HttpContext. Данный метод собственно и будет обрабатывать запрос 
	3. Для добавления компонента middleware, который представляет класс, в конвейер обработки запроса применяется метод UseMiddleware<T>(),
	где Т - это созданный нами класс
		
		Конвейер обработки запроса
	1. Как правило, для обработки запроса применяется не один, а несколько компонентов middleware. И в этом случае большую роль может играть порядок их помещения в конвейер 
	обработки запроса, а также то, как они взаимодействуют с другими компонентами.
	2. Кроме того, каждый компонент middleware может обрабатывать запрос до и после последующих в конвейере компонентов. 
	Данное обстоятельство позволяет предыдущим компонентам корректировать результат обработки последующих компонентов.
	3. MiddlewareExample - пример конвейера обработки
		
		IWebHostEnvironment и окружение
	1. Для взаимодействия со средой, в которой запущено приложение, применяются объекты, реализующие интерфейс IHostingEnvironment
	2. Этот интерфейс предлагает ряд свойств, с помощью которых мы можем получить информацию об окружении:
		а. ApplicationName: возвращает имя приложения
		б. EnvironmentName: возвращает описание среды, в которой хостируется приложение
		в. ContentRootPath: возвращает путь к корневой папке приложения
		г. WebRootPath: возвращает путь к папке, в которой хранится статический контент приложения, как правило, это папка wwwroot
		д. ContentRootFileProvider: возвращает реализацию интерфейса Microsoft.AspNetCore.FileProviders.IFileProvider, 
		которая может использоваться для чтения файлов из папки ContentRootPath
		е. WebRootFileProvider: возвращает реализацию интерфейса Microsoft.AspNetCore.FileProviders.IFileProvider, 
		которая может использоваться для чтения файлов из папки WebRootPath
	3. Кроме того, в проекте в папке Properties есть файл launchSettings.json, который также содержит описания переменных сред
	4. Для определения значений этих переменных для интерфейса IWebHostEnvironment определены специальные методы расширения:
		а. IsEnvironment(string envName): возвращает true, если имя среды равно значению параметра envName
		б. IsDevelopment(): возвращает true, если имя среды - Development
		в. IsStaging(): возвращает true, если имя среды - Staging
		г. IsProduction(): возвращает true, если имя среды - Production
	5. Хотя по умолчанию среда может принимать три состояния: Development, Staging, Production, но мы можем при желании вводить новые значения

		Статические файлы
	1. Для определения пути хранения статических файлов в проекте используются два параметра ContentRoot и WebRoot
	2. Статические файлы должны располагаться в каталоге ContentRoot/WebRoot
	3. По умолчанию "ContentRoot" представляет каталог текущего проекта, а "WebRoot" по умолчанию представляет каталог wwwroot
	4. Чтобы приложение могло бы отдавать статические файлы клиенту, нам надо добавить в конвейер обработки запроса в методе Configure() класса Startup 
	компонент middleware в виде метода расширения UseStaticFiles() 
	5. Для объекта IWebHostBuilder определен метод UseWebRoot(), который позволяет переопределить папку
		
		Работа со статическими файлами
	1. C помощью специального метода расширения UseDefaultFiles() можно настроить отправку статических веб-страниц по умолчанию без обращения к ним по полному пути
	2. В этом случае при отправке запроса к корню веб-приложения типа http://localhost:xxxx/ приложение будет искать в папке wwwroot следующие файлы:
		а. default.htm
		б. default.html
		в. index.htm
		г. index.html
	3. Если же мы хотим использовать файл, название которого отличается от вышеперечисленных, то нам надо в этом случае применить объект DefaultFilesOptions
	4. Метод UseDirectoryBrowser позволяет пользователям просматривать содержимое каталогов на сайте
	5. Данный метод имеет перегрузку, 
	которая позволяет сопоставить определенный каталог на жестком диске или в проекте с некоторой строкой запроса и тем самым потом отобразить содержимое этого каталога

		Обработка ошибок
	1. C  помощью middleware app.UseDeveloperExceptionPage() приложение перехватывает исключения и выводит информацию о них разработчику
	2. Hередко все-таки возникает необходимость дать пользователям некоторую информацию о том, что же все-таки произошло. Либо потребуется как-то обработать данную ситуацию 
	Для этих целей можно использовать еще один встроенный middleware в виде метода UseExceptionHandler()
	3. C помощью компонента StatusCodePagesMiddleware можно добавить в проект отправку информации о статусном коде

		Работа с HTTPS
	1. Начиная с версии ASP.NET Core 2.1 были добавлены новые возможности для работы с приложением по протоколу HTTPS
	2. Метод UseHttpsRedirection() объекта IApplicationBuilder добавляет для проекта переадресацию на тот же ресурс только по протоколу https (если приложение имеет поддержку SSL)
	3. С помощью метода AddHttpsRedirection() мы можем настроить параметры переадресации
	4. С помощью метода UseHsts() объекта IApplicationBuilder мы можем отправить браузеру заголовок Strict-Transport-Security
	5. C помощью метода AddHsts в методе ConfigureServices мы можем настроить параметры заголовка Strict-Transport-Security


