Dependency Injection

		Сервисы и метод ConfigureServices
	1. Dependency injection (DI) или внедрение зависимостей представляет механизм, который позволяет сделать взаимодействующие в приложении объекты слабосвязанными
	2. Такие объекты связаны между собой через абстракции, например, через интерфейсы, что делает всю систему более гибкой, более адаптируемой и расширяемой
	3. За установку сервисов в приложении отвечает метод ConfigureServices, определенный в классе Startup
	4. Все сервисы и компоненты middleware, которые предоставляются ASP.NET по умолчанию, регистрируются в приложение с помощью методов расширений IServiceCollection, 
	имеющих общую форму Add[название_сервиса]
	5. Каждый сервис в коллекции IServiceCollection представляет объект ServiceDescriptor, который несет некоторую информацию. В частности, наиболее важные свойства этого объекта:
		а. ServiceType: тип сервиса
		б. ImplementationType: тип реализации сервиса
		в. Lifetime: жизненный цикл сервиса

		Создание своих сервисов
	1. С помощью вызова services.AddTransient<IMessageSender, EmailMessageSender>(); 
	в методе ConfigureServices система на место объектов интерфейса IMessageSender будет передавать экземпляры класса EmailMessageSender
	2. После добавления в ConfigureServices сервисы можно получить и использовать в любой части приложения