Состояние приложения. Куки. Сессии

		HttpContext.Items
	1. В объекте HttpContext определена коллекция Items, которая представляет собой словарь типа IDictionary<object, object>
	2. После завершения запроса все данные из HttpContext.Items удаляются
	3. Каждый объект в этой коллекции имет ключ и значение, и с помощью ключей можно управлять объектами коллекции
	4. HttpContext.Items предоставляет ряд методов для управления элементами:
		а. void Add(object key, object value): добавляет объект value с ключом key
		б. void Clear(): удаляет все объекты
		в. bool ContainsKey(object key): возвращает true, если словарь содержит объект с ключом key
		г. bool Remove(object key): удаляет объект с ключом key, в случае удачного удаления возвращает true
		д. bool TryGetValue(object key, out object value): возвращает true, если значение объекта с ключом key успешно получено в объект value
	
		Куки
	1. Куки представляют самый простой способ сохранить данные пользователя
	2. Куки храняться на компьютере пользователя и могу устанавливаться как на сервере, так и на клиенте
	3. Так как куки посылаются с каждым запросом на сервер, то их максимальный размер ограничен 4096 байтами
	4. Чтобы получить куки, которые приходят вместе с запросом к приложению, нам надо использовать коллекцию Request.Cookies объекта HttpContext.
		Эта коллекция представляет объект IRequestCookieCollection, в котором каждый элемент - это объект KeyValuePair<string, string>, то есть некоторую пару ключ-значение
	5. Для этой коллекции определено несколько методов:
		а. bool ContainsKey(string key): возвращает true, если в коллекции кук есть куки с ключом key
		б. bool TryGetValue(string key, out string value): возвращает true, если удалось получить значение куки с ключом key в переменную value
	6. Стоит отметить, что куки - это строковые значения.
		Неважно, что вы пытаетесь сохранить в куки - все это необходимо приводить к строке и соответственно получаете из кук вы тоже строки
	7. Для установки кук, которые отправляются в ответ клиенту, применяется объект context.Response.Cookies, который представляет интерфейс IResponseCookies. 
		Этот интерфейс определяет два метода:
			а. Append(string key, string value): добавляет для куки с ключом key значение value
			б. Delete(string key): удаляет куку по ключу

		Сессии
	1. Сессия представляет собой ряд последовательных запросов, совершенных в одном браузере в течение некоторого времени
	2. Сессия может использоваться для сохранения каких-то временных данных, которые должны быть доступны, пока пользователь работает с приложением, и не требуют постоянного хранения
	3. Для хранения состояния сессии на сервере создается словарь или хеш-таблица, которая хранится в кэше и которая существует для всех запросов из одного браузера 
		в течение некоторого времени. На клиенте хранится идентификатор сессии в куках. Этот идентификатор посылается на сервер с каждым запросом. Сервер использует этот 
		идентификатор для извлечения нужных данных из сессии. Эти куки удаляются только при завершении сессии. Но если сервер получает куки, 
		которые установлены уже для истекшей сессии, то для этих кук создается новая сессия
	4. Сервер хранит данные сессии в течение ограниченного промежутка времени после последнего запроса. По умолчанию этот промежуток равен 20 минутам, хотя его также можно изменить
	5. Для каждого браузера на одном компьютере будет создаваться свой набор данных
	6. Чтобы использовать сессии, необходимо сконфигурировать их параметры в классе Startup. Все сессии работают поверх объекта IDistributedCache, 
		и ASP.NET Core предоставляет встроенную реализацию IDistributedCache, которую мы можем использовать
	7. В методе ConfigureServices() добавляются необходимые сервисы:
		services.AddDistributedMemoryCache();
		services.AddSession();
	8. В методе Configure() механизм работы с сессиями встраивается в конвейер обработки запроса:
		app.UseSession(); 
	9. После первого запроса мы сможем через инстументы браузера для разработчиков найти куку .AspNetCore.Session, которая будет представлять идентификатор сессии
	10. Объект Session определяет ряд свойств и методов, которые мы можем использовать:
		а. Keys: свойство, представляющее список строк, который хранит все доступные ключи
		б. Clear(): очищает сессию
		в. Get(string key): получает по ключу key значение, которое представляет массив байтов
		г. GetInt32(string key): получает по ключу key значение, которое представляет целочисленное значение
		д. GetString(string key): получает по ключу key значение, которое представляет строку
		е. Set(string key, byte[] value): устанавливает по ключу key значение, которое представляет массив байтов
		ж. SetInt32(string key, int value): устанавливает по ключу key значение, которое представляет целочисленное значение value
		з. SetString(string key, string value): устанавливает по ключу key значение, которое представляет строку value
		и. Remove(string key): удаляет значение по ключу
	11. Мы можем переопределить ряд настроек сессии с помощью свойств объекта SessionOptions:
		а. Cookie.Name: имя куки
		б. Cookie.Domain: домен, для которого устаналиваются куки
		в. Cookie.HttpOnly: доступны ли куки только при передаче через HTTP-запрос
		г. Cookie.Path: путь, который используется куками
		д. Cookie.Expiration: время действия куки в виде объекта System.TimeSpan
		е. Cookie.IsEssential: при значении true указывает, что куки критичны и необходимы для работы этого приложения
		ж. IdleTimeout: время действия сессии в виде объекта System.TimeSpan прм неактивности пользователя. 
			При каждом новом запросе таймаут сбрасывается. Этот параметр не зависит от Cookie.Expiration