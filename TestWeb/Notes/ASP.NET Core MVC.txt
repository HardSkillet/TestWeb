ASP.NET Core MVC

		Введение в MVC
	1. Одним из отличительных моментов платформы ASP.NET Core является применение паттерна MVC
	2. Концепция паттерна MVC предполагает разделение приложения на три компонента:
		а. Модель (model): описывает используемые в приложении данные, а также логику, которая связана непосредственно с данными, например, логику валидации данных.
			Как правило, объекты моделей хранятся в базе данных. В MVC модели представлены двумя основными типами: модели представлений, 
			которые используются представлениями для отображения и передачи данных, и модели домена, которые описывают логику управления данными.
			Модель может содержать данные, хранить логику управления этими данными. В то же время модель не должна содержать логику взаимодействия с пользователем 
			и не должна определять механизм обработки запроса. Кроме того, модель не должна содержать логику отображения данных в представлении.
		б. Представление (view): отвечают за визуальную часть или пользовательский интерфейс, нередко html-страница, через который пользователь взаимодействует с приложением. 
			Также представление может содержать логику, связанную с отображением данных. В то же время представление не должно содержать логику обработки запроса пользователя
			или управления данными.
		в. Контроллер (controller): представляет центральный компонент MVC, который обеспечивает связь между пользователем и приложением, 
			представлением и хранилищем данных. Он содержит логику обработки запроса пользователя. Контроллер получает вводимые пользователем данные и обрабатывает их.
			И в зависимости от результатов обработки отправляет пользователю определенный вывод, например, в виде представления, наполненного данными моделей

		Добавление MVC в пустой проект
	1. Во-первых, в методе ConfigureServices() с помощью вызова services.AddMvc() добавляются все сервисы MVC. После этого мы можем использовать фреймворк
	2. Во-вторых, в методе Configure() через вызовы app.UseRouting() и app.UseEndpoints() встраивается система маршрутизации, 
		которая позволяет связать приходящие от пользователей запросы с контроллерами
	3. Создаем папку Controllers, в которой создаем новый класс, наследуемый от Controller
	4. Посредством вызова метода View() будет отображаться наше представление
	5. Для этого создадим папку Views/<Name> с html страницей внутри
	6. Есть ряд опций по встраиванию сервисов, которые мы можем при необходимости использовать:
		а. AddMvc(): добавляет все сервисы фреймворка MVC (в том числе сервисы для работы с аутентификацией и авторизацией, валидацией и т.д.)
		б. AddMvcCore(): добавляет только основные сервисы фреймворка MVC, а всю допалнительную функциональность, типа аутентификацией и авторизацией, валидацией и т.д., 
			необходимо добавлять самостоятельно
		в. AddControllersWithViews(): добавляет только те сервисы фреймворка MVC, которые позволяют использовать контроллеры и представления и связанную функциональность.
			При создании проекта по типу Web Application (Model-View-Controller) используется именно этот метод
		г. AddControllers(): позволяет использовать контроллеры, но без представлений