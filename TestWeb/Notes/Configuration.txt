Конфигурация 
	
		Основы конфигурации
	1. Приложение ASP.NET Core может получать конфигурационные настройки из следующих источников:
		а. Аргументы командной строки
		б. Переменные среды окружения
		в. Объекты .NET в памяти
		г. Файлы (json, xml, ini)
		д. Azure
		е. Можно использовать свои кастомные источники и под них создавать провайдеры конфигурации
	2. Конфигурация приложения в ASP.NET Core представляет объект интерфейса IConfiguration
	3. Данный интерфейс содержит следующие компоненты:
		а. this [string key]: индексатор, через который можно получить по ключу значение параметра конфигурации. 
	Стоит отметить, что и ключ, и значение параметра конфигурации представляет собой объект типа string
		б. GetChildren(): возвращает набор подсекций текущей секции конфигурации в виде объекта IEnumerable<IConfigurationSection>
		в. GetReloadToken(): возвращает объект IChangeToken, который применяется для отслеживания изменения конфигурации
		г. GetSection(string key): возвращает секцию конфигурации, которая соответствует ключу key
	4. Также конфигурация может быть представлена интерфейсом IConfigurationRoot, который наследуется от IConfiguration:
		а. Свойство Providers возвращает коллекцию применяемых провайдеров конфигурации. Каждый провайдер конфигурации представляет объект IConfigurationProvider
		б. Метод Reload() перезагружает значения из всех применяемых источников конфигурации
	5. Итак, объект IConfiguration по сути хранит все конфигурационные настройки в виде набора пар "ключ"-"значение"
	6. Для создания объекта IConfigurationRoot применяется метод Build() класса ConfigurationBuilder, 
		а с помощью объекта IConfigurationSource для ConfigurationBuilder устанавливается источник конфигурационных настроек
	7. Как правило, установка конфигурации производится в конструкторе класа Startup
	8. Для добавления настроек применяется метод AddInMemoryCollection(), который в качестве параметра принимает словарь
	9. Мы можем получить зависимость IConfiguration таким же образом, как и любой другой сервис, который внедряется через механизм внедрения зависимостей. 
		Но в отличие от других зависимостей, объект IConfiguration мы можем также получить через конструктор класса Startup
	10. Через отладку мы можем увидеть, что объект конфигурации содержит данные из четырех источников:
		а. Файл appsettings.json, который находится в проекте по умолчанию (провайдер JsonConfigurationProvider)
		б. Файл appsettings.Development.json, который находится в проекте по умолчанию (провайдер JsonConfigurationProvider). 
			Формально приложение подхватывает файл с именем appsettings.{environment}.json, где environment - название стадии, на которой находится проект. 
			Но поскольку по умолчанию для проекта задается стадия "Development" (то есть проект находится в процессе разработки), 
			а в проекте определяется файл appsettings.develoment.json, то собственно он и подхватывается.
		в. Переменные окружения (провайдер EnvironmentVariablesConfigurationProvider)
		г. Параметры командной строки (провайдер CommandLineConfigurationProvider)
	11. Также можно увидеть, что также применяется ChainedConfigurationProvider, который фактически соединяет все применяемые провайдеры в одну цепочку
	12. Если разные источники конфигурации содержат одинаковые ключи, то используется значение, последнего добавленного источника конфигурации

		Нефайловые провайдеры конфигурации
	1. Провайдер CommandLineConfigurationProvider обеспечивает передачу аргументов командной строки в конфигурацию приложения. 
		Для применения этого провайдера у объекта вызывается метод AddCommandLine(), в который передаются аргументы командной строки. 
		Но поскольку приложение по умолчанию загружает аргументы командной строки в объект конфигурации, который передается в классы приложения через dependency injection, 
		то нам нет смысла явным образом его вызывать
	2.  Откроем командную строку и перейдем в консоли с помощью команды cd в папку проектa. Далее введем следующую команду:
		"dotnet run name=Tom age=35"
	3. Для загрузки переменных среды окружения в качестве параметров конфигурации применяется провайдер EnvironmentVariablesConfigurationProvider
	4. Для его использования у объекта ConfigurationBuilder вызывается метод AddEnvironmentVariables()
	5. Провайдер MemoryConfigurationProvider позволяет использовать в качестве конфигурации коллекцию IEnumerable<<string, string>>, 
		которая хранит данные в виде пары ключ-значение (пример - объект Dictionary)
	6. Для добавления источника конфигурации применяется метод AddInMemoryCollection(), в который передается словарь конфигурационных настроек

		Файловые провайдеры конфигурации
	1. Зачастую для хранения конфигурации в ASP.NET Core используются файлы json 
	2. Для работы с файлами json применяется провайдер JsonConfigurationProvider, 
		а для загрузки конфигурации из json для класса ConfigurationBuilder доступен метод расширения AddJsonFile()
	3. За использование конфигурации в XML-файле отвечает провайдер XmlConfigurationProvider. Для загрузки xml-файла применяется метод расширения AddXmlFile()
	4. Для работы с конфигурацией INI применяется провайдер IniConfigurationProvider. А для загрузки конфигурации из INI-файла нам надо использовать метод расширения AddIniFile()

		Конфигурация по умолчанию и Dependency Injection
	1. При необходимости мы можем использовать сразу несколько источников конфигурации
	2. Для объединить всех кастомных конфигураций с той конфигурацией, которая передается по умолчанию в приложении, 
		мы можем использовать метод AddConfiguration(), в который передается добавляемая конфигурация
	3. Тем не менее мы можем столкнуться с одной проблемой - через механизм dependency injection мы можем получить по прежнему только конфигурацию по умолчанию, 
	которая передается в конструктор Startup
	4. services.AddTransient<IConfiguration>(provider => AppConfiguration) - решение проблемы
		
		Работа с конфигурацией
	1. Для работы с конфигурацией интерфейс IConfiguration определяет следующие методы:
		а. GetSection(name): возвращает объект IConfiguration, который представляет только определенную секцию name
		б. GetChildren(): возвращает все подсекции текущего объекта конфигурации в виде набора объектов IConfiguration
		в. GetReloadToken(): возвращает токен - объект IChangeToken, который используется для уведомления при изменении конфигурации
		г. GetConnectionString(name): эквивалентен вызову GetSection("ConnectionStrings")[name] и предназначается непосредственно 
			для работы со строками подключения к различным базам даных
		д. [key]: индексатор, который позволяет получить по определенному ключу key хранящееся значение

		Создание провайдера конфгурации
	1. Создание конфигурации вовлекает три компонента: 
		а. IConfigurationSource (определяет источник конфигурации)
		б. ConfigurationProvider (сам провайдер конфигурации) 
		в. Некий класс, который добавляет метод расширения к объекту IConfiguration

		Проекция конфигурации на классы
	1. В ASP.NET Core мы можем не просто получать конфигурационные настройки в виде разрозненных пар ключ-значение, но и проецировать данные конфигурации на классы C# 
	2. Для объекта IConfiguration определен метод Bind(), который в качестве параметра принимает объект, который надо связать с данными 
	3. Стоит отметить, что между конфигурацией в json и классом Person имеется соответствие по названию свойств, 
		благодаря чему может осуществляться связка (регистр в данном случае роли не играет)
	4. В качестве альтернативы методу Bind можно использовать метод Get<T>(), который возвращает объект созданного класса
	5. С помощью метода GetSection() получаем нужную нам секцию конфигурации и затем также можно вызвать методы Bind или Get и выполнить привязку

		Передача конфигурации через IOptions
	1. С помощью объекта IOptions можно передавать конфигурацию не просто как набор настроек в виде пар ключ-значение, а как объекты определенных классов
	2. В методе ConfigureServices() по данным конфигурации из свойства AppConfiguration создается объект Person - services.Configure<Person>(AppConfiguration);
	