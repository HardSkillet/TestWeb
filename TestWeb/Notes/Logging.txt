Логгирование
	
		Ведение лога и ILogger
	1. ASP.NET Core имеет встроенную поддержку логгирования, что позволяет применять логгирование с минимальными вкраплениями кода в функционал приложения
	2. Для логгирования данных нам необходим объект ILogger<T>. По умолчанию среда ASP NET Core через механизм внедрения зависимостей уже предоставляет нам такой объект
	3. При настройке логгирования мы можем установить уровень детализации информации с помощью одного из значений перечисления LogLevel. Всего мы можем использовать следующие значения:
		а. Trace: используется для вывода наиболее детализированных сообщений. 
			Подобные сообщения могут нести важную информацию о приложении и его строении, поэтому данный уровень лучше использовать при разработке, но никак не при публикации
		б. Debug: для вывода информации, которая может быть полезной в процессе разработки и отладки приложения
		в. Information: уровень сообщений, позволяющий просто отследить поток выполнения приложения
		г. Warning: используется для вывода сообщений о неожиданных событиях, например, ошибках, 
			которые не влияют не останавливают выполнение приложения, но в то же время должны быть иследованы
		д. Error: для вывода информации об ошибках и исключениях, которые возникли при текущей операции и которые не могут быть обработаны
		е. Critical: уровень критических ошибок, которые требуют немедленной реакции - ошибками операционной системы, потерей данных в бд, переполнение памяти диска и т.д.
		ж. None: вывод информации в лог не применяется
	4. Для вывода соответствующего уровня информации у объекта ILogger определены соответствующие методы расширения:
		а. LogDebug()
		б. LogTrace()
		в. LogInformation()
		г. LogWarning()
		д. LogError()
		е. LogCritical()
	
		Фабрика логгера и провайдеры логгирования
	1. Мы можем использовать фабрику логгера для его создания
	2. По умолчанию ASP.NET Core предоставляет следующие провайдеры:
		а. Console: вывод информации на консоль. Устанавливается методом AddConsole()
		б. Debug: использует для ведения записей лога класс System.Diagnostics.Debug и в частности его метод Debug.WriteLine. 
			Соответственно все записи лога мы можем увидеть в окне Output в Visual Studio. Устанавливается методом AddDebug()
		в. EventSource: на Windows введет логгирование в лог ETW (Event Tracing for Windows), 
			для просмотра которого может использоваться инструмент PerfView (или аналагичный инструменты). 
			Хотя данный провайдер задумывался как кроссплатформенный, для Linux и MacOS пока назначение лога не определено. Устанавливается методом AddEventSourceLogger()
		г. EventLog: записывает в Windows Event Log, соответственно работает только при запуске на Windows. Устанавливается методом AddEventLog()
		
		Конфигурация и фильтрация логгирования
	1. Для логгера можно задать конфигурацию с помощью одного из следующих источников:
		а. Файлы (json, xml)
		б. Аргументы командной строки
		в. Переменные среды окружения
		г. Объекты .NET
		д. Незашифрованное хранилище Secret Manager
	2. Для установки базовой конфигурации логгирования в классе Program при создании объекта IWebHostBuilder мы можем вызвать метод ConfigureLogging()

		Создание провайдера логгирования
	1. Вначале добавим в проект новый класс FileLogger
	2. Далее добавим в проект класс FileLoggerProvider
	3. Теперь создадим вспомогательный класс FileLoggerExtensions