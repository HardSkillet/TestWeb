Маршрутизация

		Основы маршрутизации в ASP.NET Core
	1. За сопоставление запросов с конкретными адресами внутри приложения в ASP.NET Core отвечает система маршрутизации
	2. Вызов app.UseRouting(); добавляет в конвейер обработки запроса компонент EndpointRoutingMiddleware
	3. Система маршрутизации использует конечные точки (endpoints) для обработки запросов по определенным маршрутам. 
		Компонент EndpointRoutingMiddleware как раз позволяет определить маршрут, который соответствует запрошенному адресу, 
		и установить для его обработки конечную точку в виде объекта Microsoft.AspNetCore.Http.Endpoint, а также определить данные маршрута
	4. Метод app.UseEndpoints() встраивает в конвейер обработки компонент EndpointMiddleware. 
		Он принимает делегат с одним параметром типа Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, 
		у которого можно вызвать ряд методов для установки обработчика определенных маршрутов. 
		В частности, метод MapGet() добавляет конечную точку для определеного маршрута по запросу типа GET и ее обработчик
	5. С помощью метода HttpContext.GetEndpoint() можно получить конечную точку для обработки текущего запроса, 
		которая была установлена на предыдущем этапе EndpointRoutingMiddleware

		RouterMiddleware
	1. При обработке запроса RouterMiddleware сравнивает запрашиваемый адрес Url с зарегистрированными маршрутами,
		и если один из маршрутов подходит, то вызывается обработчик этого маршрута
	2. Класс RouteHandler представляет встроенный обработчик маршрута.
		В качестве параметра в него передается делегат RequestDelegate, который и будет обрабатывать запрос
	3. Для построения маршрута применяется объект RouteBuilder. 
		В его конструктор передается сервис IApplicationBuilder и вышеопределенный обработчик маршрута
	4. Определение самого маршрута идет в методе routeBuilder.MapRoute()
	5. Вызов routeBuilder.Build() возвращает объект IRouter, который затем переходит в RouterMiddleware и используется для обработки запросов
		app.UseRouter(routeBuilder.Build());
	6. Когда к приложению, которое использует маршруты, приходит запрос, то начинается процесс URL matching - процесс сопоставления строки запроса URL маршрутам. 
		Причем в приложении может использоваться множество маршрутов. И RouterMiddleware последовательно перебирает все маршруты и сравнивает их шаблон с запрошенным адресом URL. 
		Если шаблон маршрута и строка URL совпадают, то для обработки запроса выбирается обработчик данного маршрута. 
		Если обработчик установлен, то он вызывается, и далее другие маршруты не вызываются. 
		Если шаблон маршрута и запрошенный адрес URL не совпадают, тогда вызывается следующий маршрут.
		Если все маршруты были вызваны, но обработчик для запроса так и не был найден, RouterMiddleware вызывает следующий в конвейере обработки запроса компонент middleware
	
		Определение маршрутов
	1. Метод MapRoute() имеет ряд перегруженных версий, которые позволяют установить различные параметры:
		а. MapRoute(string template, RequestDelegate handler): устанавливает маршрут с шаблоном template, который будет обрабатываться делегатом handler
		б. MapRoute(string name, string template): устанавливает маршрут с именем name и шаблоном template
		в. MapRoute(string name, string template, object defaults): добавляет значения по умолчанию в виде объекта defaults
		г. MapRoute(string name, string template, object defaults, object constraints): добавляет ограничения к маршруту в виде объекта constraints
		д. MapRoute(string name, string template, object defaults, object constraints, object dataTokens): добавляет токены в виде объекта dataTokens
	2. Кроме метода MapRoute() для создания маршрута мы можем использовать еще ряд методов, 
		которые предназначены для создания маршрутов для определенных типов запросов: GET, POST, PUT, DELETE. Это методы:
			а. MapGet
			б. MapDelete
			в. MapPost
			г. MapPut
			д. MapVerb
	3. Все методы, за исключением MapMiddlewareVerb, принимают те же параметры, что и MapMiddlewareGet
	4. MapMiddlewareVerb дополнительно в качестве первого параметра принимает тип запроса

		Работа с маршрутами
	1. Рассмотрим, как происходит работа с маршрутами. При удачном сопоставлении адреса URL определенному маршруту 
		у объекта RouteContext устанавливаются свойства Handler и RouteData
	2. Через свойство Handler устанавливается и потом вызывается делегат, который обрабатывает запрос по маршруту
	3. А свойство RouteData предназначено для хранения информации о маршруте и его значениях. 
		Оно представляет объект одноименного класса RouteData, который имеет ряд свойств, содержащих информацию об обрабатываемом маршруте:
		а. Values представляет словарь значений маршрута. Эти значения получены с помощью сегментирования строки запроса URL. 
			При обработке мы можем использовать эти значения
		б. DataTokens содержит набор дополнительных данных, которые связаны с обрабатываемым маршрутом. 
			Однако если данные в RouteData.Values должны быть легко преобразованы в строки и обратно, 
			то в RouteData.DataTokens могут быть данные любых типов
		в. Routers хранит список маршрутов, которые использовались для успешного сопоставления с запросом. 
			Первый объект в этом списке представляет коллекцию маршрутов, которая применяется для генерации URL. 
			А последний элемент этого списка - собственно тот маршрут, который совпал с запросом
	4. И все эти данные мы можем получить при обрабтке запроса. Однако делегат RequestDelegate, 
		который обрабатывает запрос в качестве параметра принимает не объект RouteContext, а объект HttpContext
	5. Но у объекта HttpContext есть метод расширения GetRouteData(), который позволяет получить объект RouteData:
		RouteData routeData = context.GetRouteData();
	6. Чтобы добавить новые маршруты, нам надо последовательно вызвать несколько методов routeBuilder.MapRoute(), передав в них все необходимые параметры

		Ограничения маршрутов
	1. Для задания ограничений маршрутов применяется одна из перегруженных версий метода MapRoute() класса RouteBuilder
	2. Применяется класс RegexRouteConstraint из пространства Microsoft.AspNetCore.Routing.Constraints, который устанавливает ограничение в виде регулярного выражения
	3. Ряд классов ограничений, которые находятся в пространстве имен Microsoft.AspNet.Routing.Constraints:
		а. AlphaRouteConstraint: параметр должен состоять только из алфавитных символов английского алфавита
			new {controller=new AlphaRouteConstraint()}
		б. BoolRouteConstraint: параметр должен иметь значение true или false
			new {id=new BoolRouteConstraint()}
		в. DateTimeRouteConstraint: параметр должен предоставлять объект DateTime
			new {id=new DateTimeRouteConstraint()}
		г. DecimalRouteConstraint: параметр должен предоставлять объект decimal
			new {id=new DecimalRouteConstraint()}
		д. DoubleRouteConstraint: параметр должен предоставлять объект double
			new {id=new DoubleRouteConstraint()}
		е. FloatRouteConstraint: параметр должен предоставлять объект float
			new {id=new FloatRouteConstraint()}
		ж. GuidRouteConstraint: параметр должен предоставлять объект Guid
			new {id=new GuidRouteConstraint()}
		з. HttpMethodRouteConstraint: запрос должен представлять определенный тип - Get, Post и т.д.
				routeBuilder.MapRoute("default",
					 "{controller}/{action}/{id?}",
					 null,
					 new { httpMethod = new HttpMethodRouteConstraint("POST") }
				);
			В конструктор HttpMethodRouteConstraint передаются названия допустимых типов запросв
		и. IntRouteConstraint: параметр должен предоставлять объект int
			new {id=new IntRouteConstraint()}
		к. LengthRouteConstraint: строка, представляющая параметр, должна иметь определенную длину
			new
			{
				controller = new LengthRouteConstraint(4), // точная длина
				action = new LengthRouteConstraint(3,10) // минимальная и максимальная длина
			}
		л. LongRouteConstraint: параметр должен предоставлять объект long
			new {id=new LongRouteConstraint()}
		м. MaxLengthRouteConstraint / MinLengthRouteConstraint: определяют максимальную и минимальную длину параметра в символах
			new
			{
				controller = new MaxLengthRouteConstraint(5),
				action = new MinLengthRouteConstraint(3)
			}
		н. MaxRouteConstraint / MinRouteConstraint: определяют максимальное и минимальное числовое значение для параметра
			new {id=new MinRouteConstraint(4)} // минимальное значение - 4
		о. RangeRouteConstraint: параметр должен предоставлять числовое значение int в определенном диапазоне
				new {id=new RangeRouteConstraint(3, 100)} // диапазон от 3 до 100
			RegexRouteConstraint: задает регулярное значение, которому должен соответствовать параметр
		п. OptionalRouteConstraint: определяет ограничение для необязательного параметра. И если параметр имется в запросе, то вступает в силу внутреннее ограничение, задаваемое через свойство InnerConstraint класса OptionalRouteConstraint
		р. RequiredRouteConstraint: указывает, что параметр должен обязательно иметь какое-нибудь значение
		с. StringRouteConstraint: указывает, что параметр должен обязательно соответствовать определенной строке
			new { controller = new StringRouteConstraint("Store") } // controller должен быть равен "Store"
	4. С помощью специального класса CompositeRouteConstraint можно установить сложное ограничение, которое будет включать несколько простых

		Создание ограничений маршрутов
	1. Чтобы создать собственное ограничение, нужно реализовать интерфейс IRouteConstraint с одним единственным методом Match

		Создание своего маршрута
	1. По умолчанию каждому маршруту сопоставляется некоторый шаблон, которому должна соответствовать строка запроса. 
		Однако мы можем уйти от определения шаблонов и построить собственную логику применения маршрута к запросу через реализацию интерфейса Microsoft.AspNetCore.Routing.IRouter